https://github.com/0xbatche/parser-bison/blob/main/README.md :
-> Comprendre la grammaire shell et la tokenisation

Par exemple pour :
ls -la | wc -l
La tokenisation resultante pourrait etre :
WORD WORD PIPE WORD WORD

The Grammar avec differents tokens
https://pubs.opengroup.org/onlinepubs/009604499/utilities/xcu_chap02.html#tag_02_10_02


https://harm-smits.github.io/42docs/projects/minishell
--> https://github.com/Swoorup/mysh

En gros Minishell c est un gros Pipex,

Premiere etape =  lexer
lexical analyser, c'est decouper l'input en element executable (cmd, pipe, redirection, text, etc etc)

ensuite exec en fonction des inputs et de leur comportement dans shell.

Apparemment la fonction readline permet direct de creer un prompt et de gerer l historique, a verifier dans quel mesure et se renseigner sur 
tout ce qu elle peut potentielle;ent faire d'autre cette salope



"En premier il faut penser à un système de Lexer+Parser. Je te conseille d'aller jeter un oeuil sur la SCL pour créer ces 2 entitées.

Ton Lexer découpes l'entrée en "mot" (a toi de définir ce qu'est un mot) et le parser lui récupère une liste de mots pour comprendre le sens de la "phrase".

a partir de cette "phrase", il vas construire un AST (Abstract Syntax Tree) c'est un arbre ou vont se placer l'ensemble des actions.

En dernier lieu, un système viendras par dessus pour executer les commandes de l'arbre.

Sa c'est la base du moteur.

Pour ce qui est de l'affichage maintenant, il faut créer un Readline ce petit capte les event clavier et effectue des actions en conséquence (soit il affiche le char, soit il déplace le curseur).
Cette partie la est assez casse-pieds, surtout quand il faut gérer le multiline (quand tu fais des commandes shell de porc et que sa fait plusieur lignes de long)
il lui faut une structure pour gérer sa chaine, etc etc...


Une fois que ces fondations seront posées et en places,
il faudras que tu penses à créer un binder pour les fonctions et les variables. (quelquechose qui permet de faire le lien entre un nom de variable et sa valeur, idem pour les fonctions).

une fois que tout sa seras en place tu pourras commencer a penser aux alias, pipes,etc.. etc.."

https://segfault42.github.io/posts/minishell/ tutoriel large


https://fr.manpages.org/bash man bash fr

https://codes-sources.commentcamarche.net/forum/affich-10047436-developper-un-shell-de-base


